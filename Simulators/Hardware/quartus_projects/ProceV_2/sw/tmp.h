/////////////////////////////////////////////////////////////////////////////////////////
// Class Ctmp  was generated by GiDEL PROCWizard ver. 9.2.1.0  Fri Jan 30 13:50:05 2015
//
// Copyright © 1993-2015. All rights reserved to GiDEL Ltd.
// Your use of Gidel Corporation's design tools, libraries and other software and tools, 
// and any output is licensed for the sole purpose of initialization and utilization 
// of GiDEL PROC boards. Using this file, or related files, for any other purpose is  
// strictly prohibit. No other licenses are provided herein.
//
// use #define _PROCDLL_SCRT  // for using the PROC DLL and not as library.
/////////////////////////////////////////////////////////////////////////////////////////

#include      <proc.h>

// prefixes for variables assigned according to  following  rules : 
// "r_" 	   : register
// "ra_"      : register array
// "m_"       : memory
// "f_"       : field



#define          DRAM_BYTE_WIDTH                  8
#define          NUM_OF_COMPONENTS                2   // # of FPGA designs +1 

#define          MAIN_CLOCK                       125.000f

#define          RBF_VERSION_RBF_VERSION_VAL      0x1




                         
class  Ctmp : public Proc       
{                                               
public:			//constructor/destructor        
                                                
	               Ctmp(bool = true); 
	virtual       ~Ctmp();      
                                                
	virtual void   InitIC();                    
                         
public :                                 
                                                
	char    component_path[NUM_OF_COMPONENTS][_MAX_PATH];

	//Register layout structures
	struct  SRBF_Info   
	{
		unsigned long    f_rbf_version                  : 8;  //[0..7]
		unsigned long                                   : 24;  //reserved
	};
	struct  Sstatus_a   
	{
		unsigned long                                   : 1;  //reserved
		unsigned long    f_almost_full_a                : 1;  //[1]
		unsigned long                                   : 30;  //reserved
	};
	struct  Sstatus_b   
	{
		unsigned long                                   : 1;  //reserved
		unsigned long    f_almost_full_b                : 1;  //[1]
		unsigned long                                   : 30;  //reserved
	};
	struct  Sstatus_dst   
	{
		unsigned long                                   : 1;  //reserved
		unsigned long    f_almost_full_dst              : 1;  //[1]
		unsigned long                                   : 30;  //reserved
	};

	//******************************************************************************************
	//*                                   Memory declaration                                  *
	//******************************************************************************************
	ReadMemory<QDWORD>                                m_multi_a;
	WriteMemory<QDWORD>                               m_multi_b;
	ReadMemory<QDWORD>                                m_singlea_dst;


	//******************************************************************************************
	//*                                  Register declaration                                 *
	//******************************************************************************************
	WriteRegister                                     r_go;               
	ReadRegister                                      r_done;             

	//version of RBF
	ReadRegister                                      r_RBF_Info;         
	WriteRegister                                     r_start_multi_a;    
	ReadRegister                                      r_status_a;         
	WriteRegister                                     r_start_multi_b;    
	ReadRegister                                      r_status_b;         
	WriteRegister                                     r_reset_singlea;    
	ReadRegister                                      r_status_dst;       


	//******************************************************************************************
	//*                                   Field declaration                                   *
	//******************************************************************************************
	ReadRegField                                      f_rbf_version;      // Reg:  r_RBF_Info
	ReadRegField                                      f_almost_full_a;    // Reg:  r_status_a
	ReadRegField                                      f_almost_full_b;    // Reg:  r_status_b
	ReadRegField                                      f_almost_full_dst;  // Reg:  r_status_dst


};


//******************************************************************************************
//                                                                                         *
//                                C o n s t r u c t o r                                    *
//                                                                                         *
//******************************************************************************************

//inline  Ctmp::Ctmp(bool isLoadIC):Proc(0xc00000,0,0)
inline  Ctmp::Ctmp(bool isLoadIC):Proc(0xc00000)
{
	strcpy(component_path[1],"../../Tile/Tile.rbf");

	if(isLoadIC)
		InitIC();


	SetClock(50.000f,MAIN_CLOCK,100,8,0,0,300);


	//******************************************************************************************
	//*                                    Memory creation                                    *
	//******************************************************************************************
	m_multi_a.Create(0x300020,0x10, this );
	m_multi_b.Create(0x300040,0x10, this );
	m_singlea_dst.Create(0x300010,0x10, this );

	//******************************************************************************************
	//*                                   Register creation                                   *
	//******************************************************************************************
	r_go.Create(0x200020, this );
	r_done.Create(0x200030, this );
	r_RBF_Info.Create(0x200000, this );
	r_start_multi_a.Create(0x300030, this );
	r_status_a.Create(0x200050, this );
	r_start_multi_b.Create(0x300050, this );
	r_status_b.Create(0x200060, this );
	r_reset_singlea.Create(0x300000, this );
	r_status_dst.Create(0x200040, this );

	//******************************************************************************************
	//*                                     Field creation                                    *
	//******************************************************************************************
	f_rbf_version.Create(r_RBF_Info, this , 0xFF,0);
	f_almost_full_a.Create(r_status_a, this , 0x2,1);
	f_almost_full_b.Create(r_status_b, this , 0x2,1);
	f_almost_full_dst.Create(r_status_dst, this , 0x2,1);

}


//		destructor             
inline  Ctmp::~Ctmp() 
{                                                      
              
}

inline  void Ctmp::InitIC()
{
	 LoadIC(component_path[1],1);

	 Reset();
}

