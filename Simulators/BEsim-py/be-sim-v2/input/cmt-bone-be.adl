obtain(app.elementSize)
obtain(app.elementsPerProcess)
obtain(app.transferSizeX)
obtain(app.transferSizeY)
obtain(app.transferSizeZ)
obtain(app.timesteps)
obtain(app.phyParam)

obtain(mpi.commRank)
obtain(mpi.commSize)

# Obtain my coordinates in the 3D Cartesian grid.
# Refer: mpi_cart_coords()

obtain(mpi.cartesianX)
obtain(mpi.cartesianY)
obtain(mpi.cartesianZ)

obtain(mpi.cartesianXplus)
obtain(mpi.cartesianHasXplus)

obtain(mpi.cartesianXminus)
obtain(mpi.cartesianHasXminus)

obtain(mpi.cartesianYplus)
obtain(mpi.cartesianHasYplus)

obtain(mpi.cartesianYminus)
obtain(mpi.cartesianHasYminus)

obtain(mpi.cartesianZplus)
obtain(mpi.cartesianHasZplus)

obtain(mpi.cartesianZminus)
obtain(mpi.cartesianHasZminus)

# Print to console if the flag to do so is turned on.
#print("Rank, size ::", mpi.commRank, mpi.commSize)
IF (mpi.commRank == 0) {
   print(app.timesteps, ",", app.elementSize, ",", app.elementsPerProcess, ",", mpi.commSize, "\n")
}

#FOR ( timesteps, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99] ) {

FOR (t, [0, 1, 2] ) {

#FOR ( rk, [0, 1, 2] ) {


  call(cpu, computeConv, app.elementSize, app.elementsPerProcess)

  call(cpu, computedr, app.elementSize, app.elementsPerProcess)
  
  call(cpu, computeds, app.elementSize, app.elementsPerProcess)
  
  call(cpu, computedt, app.elementSize, app.elementsPerProcess)

  call(cpu, computeSum, app.elementSize, app.elementsPerProcess)



  # Perform transfers to neighbors in each coordinate dimension.

  call(cpu, comminit, app.elementSize, app.elementsPerProcess)

  # -------- For each axis ------------
  # If my index on this axis is even:
  #  - SEND  faces to    ABOVE  neighbor  (23)
  #  - RECV  faces from  ABOVE  neighbor  (47)
  #  - SEND  faces to    BELOW  neighbor  (61)
  #  - RECV  faces from  BELOW  neighbor  (73)
  # If my index on this axis is odd:
  #  - RECV  faces from  BELOW  neighbor  (23)
  #  - SEND  faces from  BELOW  neighbor  (47)
  #  - RECV  faces to    ABOVE  neighbor  (61)
  #  - SEND  faces from  ABOVE  neighbor  (73)
 

  # ------------------------------ X Direction --------------------------------

  call(cpu, comminitaxis, app.elementSize, app.elementsPerProcess)

  IF (0 == (mpi.cartesianX % 2)) {

    IF (mpi.cartesianHasXplus == 1) {
      call(cpu, prepareFaces, app.elementSize, app.elementsPerProcess)
      comm(send, app.transferSizeX, mpi.cartesianXplus, 23)
      call(cpu, wait, app.transferSizeX,  mpi.cartesianXplus, 47)
      call(cpu, cleanFaces, app.elementSize, app.elementsPerProcess)
    }

    IF (mpi.cartesianHasXminus == 1) {
      call(cpu, prepareFaces, app.elementSize, app.elementsPerProcess)
      comm(send, app.transferSizeX, mpi.cartesianXminus, 61)
      call(cpu, wait, app.transferSizeX,  mpi.cartesianXminus, 73)
      call(cpu, cleanFaces, app.elementSize, app.elementsPerProcess)
    }

  }

  IF (0 != (mpi.cartesianX % 2)) {

    IF (mpi.cartesianHasXminus == 1) {
      call(cpu, prepareFaces, app.elementSize, app.elementsPerProcess)
      call(cpu, wait, app.transferSizeX,  mpi.cartesianXminus, 23)
      comm(send, app.transferSizeX, mpi.cartesianXminus, 47)
      call(cpu, cleanFaces, app.elementSize, app.elementsPerProcess)
    }

    IF (mpi.cartesianHasXplus == 1) {
      call(cpu, prepareFaces, app.elementSize, app.elementsPerProcess)
      call(cpu, wait, app.transferSizeX,  mpi.cartesianXplus, 61)
      comm(send, app.transferSizeX, mpi.cartesianXplus, 73)
      call(cpu, cleanFaces, app.elementSize, app.elementsPerProcess)
    }

  }

  # ------------------------------ Y Direction --------------------------------

  call(cpu, comminitaxis, app.elementSize, app.elementsPerProcess)

  IF (0 == (mpi.cartesianY % 2)) {

    IF (mpi.cartesianHasYplus == 1) {
      call(cpu, prepareFaces, app.elementSize, app.elementsPerProcess)
      comm(send, app.transferSizeY, mpi.cartesianYplus, 23)
      call(cpu, wait, app.transferSizeY,  mpi.cartesianYplus, 47)
      call(cpu, cleanFaces, app.elementSize, app.elementsPerProcess)
    }

    IF (mpi.cartesianHasYminus == 1) {
      call(cpu, prepareFaces, app.elementSize, app.elementsPerProcess)
      comm(send, app.transferSizeY, mpi.cartesianYminus, 61)
      call(cpu, wait, app.transferSizeY,  mpi.cartesianYminus, 73)
      call(cpu, cleanFaces, app.elementSize, app.elementsPerProcess)
    }

  }

  IF (0 != (mpi.cartesianY % 2)) {

    IF (mpi.cartesianHasYminus == 1) {
      call(cpu, prepareFaces, app.elementSize, app.elementsPerProcess)
      call(cpu, wait, app.transferSizeY,  mpi.cartesianYminus, 23)
      comm(send, app.transferSizeY, mpi.cartesianYminus, 47)
      call(cpu, cleanFaces, app.elementSize, app.elementsPerProcess)
    }

    IF (mpi.cartesianHasYplus == 1) {
      call(cpu, prepareFaces, app.elementSize, app.elementsPerProcess)
      call(cpu, wait, app.transferSizeY,  mpi.cartesianYplus, 61)
      comm(send, app.transferSizeY, mpi.cartesianYplus, 73)
      call(cpu, cleanFaces, app.elementSize, app.elementsPerProcess)
    }

  }

  # ------------------------------ Z Direction --------------------------------

  call(cpu, comminitaxis, app.elementSize, app.elementsPerProcess)

  IF (0 == (mpi.cartesianZ % 2)) {

    IF (mpi.cartesianHasZplus == 1) {
      call(cpu, prepareFaces, app.elementSize, app.elementsPerProcess)
      comm(send, app.transferSizeZ, mpi.cartesianZplus, 23)
      call(cpu, wait, app.transferSizeZ,  mpi.cartesianZplus, 47)
      call(cpu, cleanFaces, app.elementSize, app.elementsPerProcess)
    }

    IF (mpi.cartesianHasZminus == 1) {
      call(cpu, prepareFaces, app.elementSize, app.elementsPerProcess)
      comm(send, app.transferSizeZ, mpi.cartesianZminus, 61)
      call(cpu, wait, app.transferSizeZ,  mpi.cartesianZminus, 73)
      call(cpu, cleanFaces, app.elementSize, app.elementsPerProcess)
    }

  }

  IF (0 != (mpi.cartesianZ % 2)) {

    IF (mpi.cartesianHasZminus == 1) {
      call(cpu, prepareFaces, app.elementSize, app.elementsPerProcess)
      call(cpu, wait, app.transferSizeZ,  mpi.cartesianZminus, 23)
      comm(send, app.transferSizeZ, mpi.cartesianZminus, 47)
      call(cpu, cleanFaces, app.elementSize, app.elementsPerProcess)
    }

    IF (mpi.cartesianHasZplus == 1) {
      call(cpu, prepareFaces, app.elementSize, app.elementsPerProcess)
      call(cpu, wait, app.transferSizeZ,  mpi.cartesianZplus, 61)
      comm(send, app.transferSizeZ, mpi.cartesianZplus, 73)
      call(cpu, cleanFaces, app.elementSize, app.elementsPerProcess)
    }

  }


call(cpu, computerk, app.elementSize, app.elementsPerProcess)

 

#}	#end of rk stage for loop
 
  IF (mpi.commRank == 0) {
  obtain(sim.incrementalTime)
  #print("time:", sim.incrementalTime)
  print(sim.incrementalTime, ",")
  }
  
}	#end of timesteps for loop


IF (mpi.commRank == 0) {
  print("\n") }
